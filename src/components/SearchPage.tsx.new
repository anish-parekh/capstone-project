import { Box, Tab, Tabs, Paper, TextField, Button, Typography, Select, MenuItem, FormControl, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, IconButton, Checkbox } from '@mui/material';
import { useState } from 'react';
import SearchIcon from '@mui/icons-material/Search';
import AddIcon from '@mui/icons-material/Add';
import { TabPanel, a11yProps } from './TabPanel';

// Sample data for the workflow table
const sampleRows = [
  { 
    id: 1, 
    assetClass: 'Equity', 
    counterparty: 'ACME Corp', 
    cqr: 0.23, 
    curveId: 'C-1234', 
    cva: 1200, 
    dva: 800, 
    estimatedCharge: 2500, 
    fba: 150, 
    fca: 320, 
    fva: 480, 
    netTotal: 3, 
    newTrades: 5, 
    payRec: 'Pay', 
    pricingDescription: 'Standard', 
    removedTrades: 2, 
    roe: 0.15, 
    startTime: '2025-07-18 08:30', 
    status: 'Pending' 
  },
  { 
    id: 2, 
    assetClass: 'Fixed Income', 
    counterparty: 'Global Bank', 
    cqr: 0.34, 
    curveId: 'C-2468', 
    cva: 1800, 
    dva: 1200, 
    estimatedCharge: 3800, 
    fba: 220, 
    fca: 480, 
    fva: 650, 
    netTotal: 5, 
    newTrades: 8, 
    payRec: 'Rec', 
    pricingDescription: 'Premium', 
    removedTrades: 3, 
    roe: 0.22, 
    startTime: '2025-07-18 09:15', 
    status: 'Completed' 
  },
  { 
    id: 3, 
    assetClass: 'Currency', 
    counterparty: 'Finance Co', 
    cqr: 0.18, 
    curveId: 'C-3579', 
    cva: 950, 
    dva: 580, 
    estimatedCharge: 1700, 
    fba: 90, 
    fca: 210, 
    fva: 320, 
    netTotal: 2, 
    newTrades: 3, 
    payRec: 'Pay', 
    pricingDescription: 'Standard', 
    removedTrades: 1, 
    roe: 0.12, 
    startTime: '2025-07-18 10:00', 
    status: 'Processing' 
  },
];

export default function SearchPage() {
  const [tabValue, setTabValue] = useState(0);
  const [sourceSystem, setSourceSystem] = useState('');
  const [tradeId, setTradeId] = useState('');
  const [counterparty, setCounterparty] = useState('');
  const [searchResults, setSearchResults] = useState<any[]>([]);

  const handleTabChange = (_event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
  };

  const handleTradeIdSearch = () => {
    console.log('Searching for Trade ID:', tradeId, 'in Source System:', sourceSystem);
    // Simulate search results
    setSearchResults(sampleRows);
  };

  const handleCounterpartySearch = () => {
    console.log('Searching for Counterparty:', counterparty);
    // Simulate search results
    setSearchResults(sampleRows);
  };

  const renderDataTable = () => {
    return (
      <TableContainer component={Paper} variant="outlined">
        <Table sx={{ minWidth: 650 }} size="small" aria-label="workflow table">
          <TableHead>
            <TableRow sx={{ backgroundColor: '#f5f5f5' }}>
              <TableCell padding="checkbox" align="center" sx={{ width: 40 }}>#</TableCell>
              <TableCell>Asset Class</TableCell>
              <TableCell>Counterparty</TableCell>
              <TableCell align="right">Cqr</TableCell>
              <TableCell>Curve ID</TableCell>
              <TableCell align="right">CVA</TableCell>
              <TableCell align="right">DVA</TableCell>
              <TableCell align="right">Estimated Charge</TableCell>
              <TableCell align="right">FBA</TableCell>
              <TableCell align="right">FCA</TableCell>
              <TableCell align="right">FVA</TableCell>
              <TableCell>ID</TableCell>
              <TableCell align="center">Net/Total</TableCell>
              <TableCell align="center">New Trades</TableCell>
              <TableCell>Pay/Rec</TableCell>
              <TableCell>Pricing Description</TableCell>
              <TableCell align="center">Removed Trades</TableCell>
              <TableCell align="right">ROE</TableCell>
              <TableCell>Start Time</TableCell>
              <TableCell>Status</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {searchResults.length > 0 ? (
              searchResults.map((row) => (
                <TableRow key={row.id}>
                  <TableCell padding="checkbox" align="center">
                    <Checkbox size="small" />
                  </TableCell>
                  <TableCell>{row.assetClass}</TableCell>
                  <TableCell>{row.counterparty}</TableCell>
                  <TableCell align="right">{row.cqr}</TableCell>
                  <TableCell>{row.curveId}</TableCell>
                  <TableCell align="right">{row.cva}</TableCell>
                  <TableCell align="right">{row.dva}</TableCell>
                  <TableCell align="right">{row.estimatedCharge}</TableCell>
                  <TableCell align="right">{row.fba}</TableCell>
                  <TableCell align="right">{row.fca}</TableCell>
                  <TableCell align="right">{row.fva}</TableCell>
                  <TableCell>{row.id}</TableCell>
                  <TableCell align="center">{row.netTotal}</TableCell>
                  <TableCell align="center">{row.newTrades}</TableCell>
                  <TableCell>{row.payRec}</TableCell>
                  <TableCell>{row.pricingDescription}</TableCell>
                  <TableCell align="center">{row.removedTrades}</TableCell>
                  <TableCell align="right">{row.roe}</TableCell>
                  <TableCell>{row.startTime}</TableCell>
                  <TableCell>{row.status}</TableCell>
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell colSpan={20} align="center">No data available</TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </TableContainer>
    );
  };

  return (
    <Box sx={{ width: '100%' }}>
      <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
        <Tabs 
          value={tabValue} 
          onChange={handleTabChange} 
          aria-label="search tabs"
          sx={{ backgroundColor: '#f8f8f8' }}
        >
          <Tab label="Trade ID Search" {...a11yProps(0)} />
          <Tab label="Counterparty Search" {...a11yProps(1)} />
        </Tabs>
      </Box>

      {/* Trade ID Search Tab */}
      <TabPanel value={tabValue} index={0}>
        <Paper elevation={1} sx={{ p: 2, mb: 2 }}>
          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>
            {/* First row with labels */}
            <Box sx={{ display: 'flex', gap: 4, ml: 1 }}>
              <Typography variant="body1" sx={{ minWidth: 120 }}>Source System</Typography>
              <Typography variant="body1" sx={{ minWidth: 120, ml: 8 }}>Trade ID</Typography>
            </Box>
            
            {/* Second row with inputs and buttons */}
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
              <FormControl size="small" sx={{ minWidth: 180 }}>
                <Select
                  value={sourceSystem}
                  displayEmpty
                  onChange={(e) => setSourceSystem(e.target.value)}
                  sx={{ height: 36 }}
                >
                  <MenuItem value=""><em>Select System</em></MenuItem>
                  <MenuItem value="system1">System 1</MenuItem>
                  <MenuItem value="system2">System 2</MenuItem>
                  <MenuItem value="system3">System 3</MenuItem>
                </Select>
              </FormControl>
              
              <TextField 
                size="small"
                variant="outlined" 
                value={tradeId}
                onChange={(e) => setTradeId(e.target.value)}
                sx={{ minWidth: 220 }}
              />
              
              <Box sx={{ display: 'flex', gap: 0.5 }}>
                <IconButton size="small" color="primary" sx={{ border: '1px solid #ccc', borderRadius: 1, p: 0.5 }}>
                  <SearchIcon fontSize="small" />
                </IconButton>
                <IconButton size="small" color="success" sx={{ border: '1px solid #ccc', borderRadius: 1, p: 0.5 }}>
                  <AddIcon fontSize="small" />
                </IconButton>
              </Box>
              
              <Button 
                variant="outlined" 
                onClick={handleTradeIdSearch}
                sx={{ ml: 'auto', px: 3, py: 0.5 }}
              >
                Submit
              </Button>
            </Box>
          </Box>
        </Paper>

        <Paper elevation={1} sx={{ p: 2 }}>
          <Typography variant="h6" gutterBottom>
            Tasks
          </Typography>
          {renderDataTable()}
        </Paper>
      </TabPanel>

      {/* Counterparty Search Tab */}
      <TabPanel value={tabValue} index={1}>
        <Paper elevation={3} sx={{ p: 3, mb: 2 }}>
          <Typography variant="h6" gutterBottom>
            Search by Counterparty
          </Typography>
          <Box component="form" sx={{ display: 'flex', alignItems: 'flex-end', gap: 2 }}>
            <TextField
              label="Enter Counterparty Name"
              variant="outlined"
              value={counterparty}
              onChange={(e) => setCounterparty(e.target.value)}
              sx={{ minWidth: 300 }}
            />
            <Button 
              variant="contained" 
              onClick={handleCounterpartySearch}
              disabled={!counterparty}
            >
              Search
            </Button>
          </Box>
        </Paper>
        
        {searchResults.length > 0 && (
          <Paper elevation={1} sx={{ p: 2 }}>
            <Typography variant="h6" gutterBottom>
              Tasks
            </Typography>
            {renderDataTable()}
          </Paper>
        )}
      </TabPanel>
    </Box>
  );
}
